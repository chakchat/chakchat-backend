# TODO:
# 1. Add static to nginx
# 2. Persist traces
# 3. argocd
# 4. Build CI/CD
# 5. https

deployments:
  messaging:
    image: cr.yandex/crppdu233q7oqs81a1ta/messaging:test-0f50733
    imagePullPolicy: Always
    volumeMounts:
      /etc/messaging:
        configMap: messaging-conf
      /app/keys:
        secret: public-rsa-key-sec
    envSecret: messaging-sec-env
  identity:
    image: cr.yandex/crppdu233q7oqs81a1ta/identity:test-0f50733
    imagePullPolicy: Always
    volumeMounts:
      /etc/identity:
        configMap: identity-conf
      /app/keys:
        secret: identity-key-sec
    envSecret: identity-sec-env
  file-storage:
    image: cr.yandex/crppdu233q7oqs81a1ta/file-storage:test-0f50733
    imagePullPolicy: Always
    volumeMounts:
      /etc/file-storage:
        configMap: file-storage-conf
      /app/keys:
        secret: public-rsa-key-sec
    envSecret: file-storage-sec-env
  user:
    image: cr.yandex/crppdu233q7oqs81a1ta/user:test-0f50733
    imagePullPolicy: Always
    volumeMounts:
      /etc/user:
        configMap: user-conf
      /app/keys:
        secret: public-rsa-key-sec
    envSecret: user-sec-env
  sms-service-stub:
    image: cr.yandex/crppdu233q7oqs81a1ta/sms-service-stub:test-0f50733
    imagePullPolicy: Always
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    args: ["--config=/etc/otel-collector/config.yaml"]
    volumeMounts:
      /etc/otel-collector:
        configMap: otel-collector-conf
  jaeger:
    image: jaegertracing/all-in-one:latest
    envSecret: jaeger-sec-env
  nginx:
    image: nginx
    volumeMounts:
      /etc/nginx:
        configMap: nginx-conf

services:
  messaging:
    selector:
      app: messaging
    ports:
      - name: http
        port: 8080
        targetPort: 8080
        protocol: TCP
  identity:
    selector:
      app: identity
    ports:
      - name: http
        port: 5000
        targetPort: 5000
        protocol: TCP
  file-storage:
    selector:
      app: file-storage
    ports:
      - name: http
        port: 5004
        targetPort: 5004
        protocol: TCP
      - name: grpc
        port: 9090
        targetPort: 9090
        protocol: TCP
  user:
    selector:
      app: user
    ports:
      - name: http
        port: 5004
        targetPort: 5004
        protocol: TCP
  sms-service-stub:
    selector:
      app: sms-service-stub
    ports:
      - name: http
        port: 5023
        targetPort: 5023
        protocol: TCP
  otel-collector:
    selector:
      app: otel-collector
    ports:
      - name: grpc
        port: 4317
        targetPort: 4317
        protocol: TCP
  jaeger:
    selector:
      app: jaeger
    ports:
      - name: grpc
        port: 4317
        targetPort: 4317
        protocol: TCP
      - name: ui
        port: 16686
        targetPort: 16686
        protocol: TCP
  nginx:
    selector:
      app: nginx
    ports:
      - name: http
        port: 80
        targetPort: 80
        protocol: TCP
    type: LoadBalancer

redis:
  messaging-redis:
    secret: messaging-redis-sec-env
  identity-redis:
    secret: identity-redis-sec-env
  file-storage-redis:
    secret: file-storage-redis-sec-env

jobs:
  messaging-pg-migrate:
    template:
      spec:
        containers:
          - name: migrate
            image: cr.yandex/crppdu233q7oqs81a1ta/messaging-pg-migrate:test-0f50733
            command: ["flyway", "migrate"]
            envFrom:
              - secretRef:
                  name: messaging-migrate-sec-env
        initContainers:
          - name: wait-pg
            image: postgres:latest
            command: &wait-pg-command
              - sh
              - -c
              - |
                wait() {
                    echo "Waiting for PostgreSQL readiness..."
                    timeout 300 sh -c "
                        until pg_isready -d $PG_CONNECTION_STRING ; do
                            sleep 1
                        done
                        echo \"PostgreSQL is ready!\"
                    "
                }
                if ! wait; then
                    echo "Timeout reached while attempting to connect PostgreSQL"
                    exit 1
                fi
            envFrom:
              - secretRef:
                  name: messaging-wait-pg-sec-env
        restartPolicy: Never
  user-pg-migrate:
    template:
      spec:
        containers:
          - name: migrate
            image: cr.yandex/crppdu233q7oqs81a1ta/user-pg-migrate:test-0f50733
            command: ["flyway", "migrate"]
            envFrom:
              - secretRef:
                  name: user-migrate-sec-env
        initContainers:
          - name: wait-pg
            image: postgres:latest
            command: *wait-pg-command
            envFrom:
              - secretRef:
                  name: user-wait-pg-sec-env
        restartPolicy: Never

pg:
  messaging-pg:
    instances: 1
    database: messaging
    owner: messaging
    secret: messaging-pg-sec
  user-pg:
    instances: 1
    database: userdb
    owner: user
    secret: user-pg-sec
  file-storage-pg:
    instances: 1
    database: filemetadata
    owner: filestorage
    secret: file-storage-pg-sec

configMaps:
  messaging-conf:
    data:
      config.yml: |
        jwt:
          signing_method: RS256
          issuer: identity_service
          audience:
            - messaging_service
          key_file_path: /app/keys/rsa.pub
        redis:
          addr: messaging-redis:6379
          db: 0
        file_storage:
          grpc_addr: file-storage-service:9090
        otlp:
          grpc_addr: otel-collector:4317
  identity-conf:
    data:
      config.yml: |
        access_token:
          signing_method: HS512
          lifetime: 5m 
          issuer: identity_service
          audience: 
            - client
          key_file_path: /app/keys/sym
        refresh_token:
          signing_method: HS512
          lifetime: 30m 
          issuer: identity_service
          audience: 
            - client
          key_file_path: /app/keys/sym
        internal_token:
          signing_method: RS256
          lifetime: 1m 
          issuer: identity_service
          audience: 
            - identity_service
          key_file_path: /app/keys/rsa
        invalidated_token_storage:
          exp: 4m # A little bit longer than refresh_token.lifetime
        userservice:
          grpc_addr: user-service:50051
        redis:
          addr: identity-redis:6379
          password: secret
          db: 0
        signin_meta:
          lifetime: 2m
        signup_meta:
          lifetime: 2m
        idempotency:
          data_exp: 10m
        phone_code:
          send_frequency: 1m
        sms:
          type: stub
          stub:
            addr: http://sms-service-stub:5023
        otlp:
          grpc_addr: otel-collector:4317
  file-storage-conf:
    data:
      config.yml: |
        jwt:
          signing_method: RS256
          lifetime: 3m
          issuer: identity_service
          audience: 
            - file_storage_service
          key_file_path: /app/keys/rsa.pub
        redis:
          addr: file-storage-redis:6379
          password: secret
          db: 0
        idempotency:
          data_exp: 10m
        upload:
          file_size_limit: 10485760 # 10MB
        multipart_upload:
          min_file_size: 524288000 # 10MB
          max_part_size: 1048576 # 100MB
        otlp:
          grpc_addr: otel-collector:4317
        grpc_service:
          port: 9090
  user-conf:
    data:
      config.yml: |
        server:
          grpc-port: "50051" 
        jwt:
          signing_method: RS256
          lifetime: 3m
          issuer: identity_service
          audience: 
            - user_service
          key_file_path: /app/keys/rsa.pub
        otlp:
          grpc_addr: otel-collector:4317
  otel-collector-conf:
    data:
      config.yaml: |
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
        exporters:
          otlp:
            endpoint: jaeger:4317
            tls:
              insecure: true
        service:
          pipelines:
            traces:
              receivers: [otlp]
              processors: []
              exporters: [otlp]
  nginx-conf:
    data:
      nginx.conf: |
        events{
            worker_connections 1024;
        }

        http {
            server {
                listen 80;

                # 10M plus reserved 1M
                client_max_body_size 11M;

                location / {
                    return 200 "Hello World!";
                }

                location /dev/jaeger/ {
                    proxy_pass http://jaeger:16686/; 
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    
                    sub_filter_once off;
                    sub_filter_types *;
                    sub_filter 'href="/' 'href="/dev/jaeger/';
                    sub_filter 'src="/' 'src="/dev/jaeger/';
                    sub_filter 'url(/' 'url(/dev/jaeger/';
                }

                location /api/identity/ {
                    proxy_pass http://identity:5000/;
                }

                location /api/file-storage/ {
                    auth_request /auth;
                    auth_request_set $x_internal_token $upstream_http_x_internal_token;

                    # Internal services shouldn't know about the Authorization header.
                    proxy_set_header Authorization "";
                    proxy_set_header X-Internal-Token $x_internal_token;
                    proxy_pass http://file-storage:5004/;
                    # To prevent the client from seeing the Authorization header.
                    proxy_hide_header X-Internal-Token;
                }
                
                location /api/user/v1.0/are-you-a-real-teapot/ {
                    proxy_pass http://user:5004/v1.0/are-you-a-real-teapot;
                }

                location /api/user/v1.0/username/ {
                    proxy_pass http://user:5004/v1.0/username/;
                }
                
                location /api/user/ {
                    auth_request /auth;
                    auth_request_set $x_internal_token $upstream_http_x_internal_token;

                    # Internal services shouldn't know about the Authorization header.
                    proxy_set_header Authorization "";
                    proxy_set_header X-Internal-Token $x_internal_token;
                    proxy_pass http://user:5004/;
                    # To prevent the client from seeing the Authorization header.
                    proxy_hide_header X-Internal-Token;
                }

                location /api/messaging/ {
                    auth_request /auth;
                    auth_request_set $x_internal_token $upstream_http_x_internal_token;

                    # Internal services shouldn't know about the Authorization header.
                    proxy_set_header Authorization "";
                    proxy_set_header X-Internal-Token $x_internal_token;
                    proxy_pass http://messaging:8080/;
                    # To prevent the client from seeing the Authorization header.
                    proxy_hide_header X-Internal-Token;
                }

                location /auth {
                    proxy_pass http://identity:5000/v1.0/identity;
                    internal; # Ensure this location is not directly accessible by the client
                }

                location /sms/ {
                    proxy_pass http://sms-service-stub:5023/;
                }

                error_page 401 @401.json;
                location @401.json {
                    default_type application/json;
                    return 401 '{\n\t"error_type": "unauthorized",\n\t"error_message": "Unauthorized."\n}';
                }

                error_page 413 @413.json;
                location @413.json {
                    default_type application/json;
                    return 413 '{\n\t"error_type": "body_too_large",\n\t"error_message": "Request body is too large."\n}';
                }

                error_page 404 @404.json;
                location @404.json {
                    default_type application/json;
                    return 404 '{\n\t"error_type": "not_found",\n\t"error_message": "Not Found"\n}';
                }
                
                error_page 500 @500.json;
                location @500.json {
                    default_type application/json;
                    return 500 '{\n\t"error_type": "internal_error",\n\t"error_message": "Internal Server Error (nginx)"\n}';
                }
                
                error_page 502 @502.json;
                location @502.json {
                    default_type application/json;
                    return 502 '{\n\t"error_type": "internal_error",\n\t"error_message": "Bad gateway (nginx)"\n}';
                }
            }
        }

secretId: e6qskuc679asmqsealf1
secrets:
  # Messaging service
  messaging-sec-env:
    data:
      PG_CONN_STRING: '{{ .messaging_svc_pg_conn_string }}'
      REDIS_PASSWORD: '{{ .messaging_svc_redis_password }}'
  messaging-migrate-sec-env:
    data:
      FLYWAY_URL: jdbc:postgresql://messaging-pg-rw:5432/messaging
      FLYWAY_USER: messaging
      FLYWAY_PASSWORD: '{{ .messaging_svc_pg_password }}'
      FLYWAY_LOCATIONS: filesystem:/app/migrations
      FLYWAY_VALIDATE_MIGRATION_NAMING: "true"
      FLYWAY_BASELINE_ON_MIGRATE: "true"
  messaging-wait-pg-sec-env:
    data:
      PG_CONNECTION_STRING: '{{ .messaging_svc_pg_conn_string }}'
  messaging-pg-sec:
    data:
      username: messaging
      password: '{{ .messaging_svc_pg_password }}'
  messaging-redis-sec-env:
    data:
      REDIS_PASSWORD: '{{ .messaging_svc_redis_password }}'
  # Identity service
  identity-sec-env:
    data:
      REDIS_PASSWORD: '{{ .identity_svc_redis_password }}'
  identity-redis-sec-env:
    data:
      REDIS_PASSWORD: '{{ .identity_svc_redis_password }}'
  # File storage service
  file-storage-sec-env:
    data:
      FILE_STORAGE_AWS_ACCESS_KEY_ID: '{{ .s3_access_key_id }}'
      FILE_STORAGE_AWS_SECRET_ACCESS_KEY: '{{ .s3_secret_access_key }}'
      FILE_STORAGE_AWS_REGION: ru-central1-a
      FILE_STORAGE_AWS_ENDPOINT_URL: https://storage.yandexcloud.net
      FILE_STORAGE_S3_BUCKET: chakchat-test
      FILE_STORAGE_S3_URL_PREFIX: https://storage.yandexcloud.net/chakchat-test/
      FILE_STORAGE_DB_DSN: host=file-storage-pg-rw port=5432 user=filestorage password={{ .file_st_svc_pg_password }} dbname=filemetadata sslmode=disable
  file-storage-pg-sec:
    data:
      username: filestorage
      password: '{{ .file_st_svc_pg_password }}'
  file-storage-redis-sec-env:
    data:
      REDIS_PASSWORD: '{{ .file_st_svc_redis_password }}'
  jaeger-sec-env:
    data:
      COLLECTOR_OTLP_ENABLED: "true"
  # User service
  user-sec-env:
    data:
      PG_CONNECTION_STRING: '{{ .user_svc_pg_conn_string }}'
  user-pg-sec:
    data:
      username: user
      password: '{{ .user_svc_pg_password }}'
  user-migrate-sec-env:
    data:
      FLYWAY_URL: jdbc:postgresql://user-pg-rw:5432/userdb
      FLYWAY_USER: user
      FLYWAY_PASSWORD: '{{ .user_svc_pg_password }}'
      FLYWAY_LOCATIONS: filesystem:/app/migrations
      FLYWAY_VALIDATE_MIGRATION_NAMING: "true"
      FLYWAY_BASELINE_ON_MIGRATE: "true"
  user-wait-pg-sec-env:
    data:
      PG_CONNECTION_STRING: '{{ .user_svc_pg_conn_string }}'
  # JWT signing keys
  public-rsa-key-sec:
    data:
      rsa.pub: '{{ .jwt_signing_key_asymmetric_public }}'
  identity-key-sec:
    data:
      sym: '{{ .jwt_signing_key_symmetric }}'
      rsa.pub: '{{ .jwt_signing_key_asymmetric_public }}'
      rsa: '{{ .jwt_signing_key_asymmetric_private }}'
