openapi: 3.0.3
info:
  title: Users Service REST API
  description: Users Service REST API
  version: "1.0"
servers:
  - url: http://localhost:80/api/users/v1.0/
    description: nginx reverse-proxied localhost
tags:
  - name: others
    description: Other users info
  - name: me 
    description: User info about requesting user
  - name: signup
    description: Sign Up user
  - name: deleteAccount
    description: Delete user account
#TODO: Maybe response should be standardized.
# For example:
# {
#   "error_type": "invalid_phone",
#   "error_message": "Phone number is invalid",
#   "data": null
# }
# or 
# {
#   "error_type": null,
#   "error_message": null,
#   "data": [
#     {
#       "id": "35bdbf25-7715-41d2-b77b-6f69b49ce0a9",
#       "name": "John Doe",
#       "username": "johndoe",
#       "phone": "+1234567890",
#       "photo": "https://example.com/johndoe.jpg",
#       "dateOfBirth": "1990-01-01"
#     }
#   ],
#   "pagination": {
#     "page": 1,
#     "size": 1,
#     "total": 10
#   }
# }
# TODO: Idempotency keys for non-idempotent requests.
paths:
  /user/{userId}:
    get:
      summary: Get user info
      description: Gets user profile info with restrictions.
      tags:
        - others
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /users:
    get:
      summary: Find users by search criteria
      description: Finds users by search criteria. Pagination is supported. At least one search criteria must be specified.
      tags:
        - others
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
            nullable: true
        - name: username
          in: query
          required: false
          schema:
            type: string
            nullable: true
        - name: page
          description: Page number (starting with 1). Default is 1.
          in: query
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
        - name: limit
          description: Limits the number of records to be returned. Default is 10.
          in: query
          required: false
          schema:
            type: integer
            format: int32
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '400':
          description: Bad Request. Most likely no criteria is specified.
  /me:
    get:
      summary: Get user info about requesting user
      description: Gets user profile info
      tags:
        - me
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
    put:
      summary: Update user info about requesting user
      description: Updates user profile info
      tags:
        - me
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '400':
          description: Bad Request. Most likely validation error.
    delete:
      summary: Verify phone number verification code.
      description: Verify phone number verification code
      tags:
        - deleteAccount
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyPhoneCode"
      responses:
        '204':
          description: No Content. Successfully verified phone number.
        '400':
          description: Bad Request. Maybe phone number is already used or code is invalid. 
  /me/deletion/request-code:
    post:
      summary: Request for phone number verification code.
      description: Request phone number verification code
      tags:
        - deleteAccount
      security:
        - bearerAuth: []
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestPhoneCode"
      responses:
        '204':
          description: No Content. Successfully sent verification code.
        '400':
          description: Bad Request. Maybe phone number is already used.
  /me/restrictions:
    get:
      summary: Get own user's restrictions
      description: Gets own user's restrictions
      tags:
        - me
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRestrictions'
        '401':
          description: Unauthorized
    put:
      summary: Update own user's restrictions
      description: Updates own user's restrictions
      tags:
        - me
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRestrictions"
      responses:
        '204':
          description: No Content. Successfully updated restrictions.
        '401':
          description: Unauthorized
        '400':
          description: Bad Request.
  /signup/request-code:
    post:
      summary: Request for phone number verification code.
      description: Signup user
      tags:
        - signup
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestPhoneCode"
      responses:
        '204':
          description: No Content. Successfully sent verification code.
        '400':
          description: Bad Request. Maybe phone number is already used.
  /signup/verify-code:
    post:
      summary: Verify phone number verification code.
      description: Verify phone number verification code
      tags:
        - signup
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyPhoneCode"
      responses:
        '204':
          description: No Content. Successfully verified phone number.
        '400':
          description: Bad Request. Maybe phone number is already used or code is invalid.
  # I guess it is idempotent because phone number should be unique.
  /signup:
    post:
      summary: Sign Up user
      description: Sign Up user
      tags:
        - signup
      requestBody:
        content:
          application/json:
            schema: 
              "$ref": "#/components/schemas/SignUp"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Bad Request.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRestrictions:
      description: User restrictions info. It is used only for view by users themselves.
      type: object
      properties:
        phone:
          "$ref": "#/components/schemas/FieldRestriction"
        dateOfBirth:
          "$ref": "#/components/schemas/FieldRestriction"
      required:
        - phone
        - dateOfBirth
    FieldRestriction:
      type: object
      properties:
        open_to: 
          enum: [everyone, only_me, specified]
          type: string
          nullable: false
        specified_users:
          type: array
          items:
            type: string
            format: uuid
            nullable: false
            description: User ids
      required:
        - open_to
    SignUp:
      properties:
        phone:
          type: string
          format: phone
          nullable: false
        name:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
      required:
        - phone
        - name
        - username
        - password
    RequestPhoneCode:
      properties:
        phone:
          type: string
          format: phone
          nullable: false
      required:
        - phone
    VerifyPhoneCode:
      properties:
        phone:
          type: string
          format: phone
          nullable: false
        code:
          type: string
          nullable: false
      required:
        - phone
        - code
    UserProfile:
      description: User profile info. It is used only for view.
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: false
        name:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
        phone:
          type: string
          format: phone
          nullable: true
          description: User phone number. May be null if user that made a request is stricted to see this phone number.
        photo:
          type: string
          format: url
          nullable: true
          description: User photo url. May be null if it is not set.
        dateOfBirth:
          type: string
          format: date
          nullable: true
          description: User date of birth. May be null if user that made a request is stricted to see this date of birth.
      required:
        - id
        - name
        - username
      example:
        id: 35bdbf25-7715-41d2-b77b-6f69b49ce0a9
        name: John Doe
        username: johndoe
        phone: +1234567890
        photo: https://example.com/johndoe.jpg
        dateOfBirth: 1990-01-01
    UpdateUserProfile:
      description: User profile info. It is used only for update. Contains only updateble fields.
      type: object
      properties:
        name:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
        photo:
          type: string
          format: url
          nullable: true
        dateOfBirth:
          type: string
          format: date
          nullable: true