events{
    worker_connections 1024;
}

http {
    server {
        listen 80;

        # TODO: it is just reference for now how to protect the APIs. Replace it with something that makes sense.
        location /<some-api> { 
            auth_request /auth;
            auth_request_set $x_internal_auth $upstream_http_x_internal_authorization;

            # Internal services shouldn't know about the Authorization header.
            proxy_set_header Authorization "";
            proxy_set_header X-Internal-Authorization $x_internal_auth;
            proxy_pass http://server:5000/internal;
            # To prevent the client from seeing the Authorization header.
            proxy_hide_header X-Internal-Authorization;
        }

        location /auth {
            proxy_pass http://server:5000/auth;
            internal; # Ensure this location is not directly accessible by the client
        }

        error_page 401 @401.json;
        location @401.json {
            default_type application/json;
            return 401 '{\n\t"error_type": "unauthorized",\n\t"error_message": "Unauthorized"\n}';
        }

        error_page 403 @403.json;
        location @403.json {
            default_type application/json;
            return 403 '{\n\t"error_type": "forbidden",\n\t"error_message": "Forbidden"\n}';
        }

        error_page 404 @404.json;
        location @404.json {
            default_type application/json;
            return 404 '{\n\t"error_type": "not_found",\n\t"error_message": "Not Found"\n}';
        }
        
        error_page 500 @500.json;
        location @500.json {
            default_type application/json;
            return 500 '{\n\t"error_type": "internal_error",\n\t"error_message": "Internal Server Error"\n}';
        }
    }
}