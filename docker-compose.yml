services:
  nginx:
    image: nginx:latest
    ports: [80:80, 443:443]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - identity-service
      - file-storage-service
      - user-service

  # Identity service
  identity-service:
    build: ./identity-service
    volumes:
      - ./identity-service/config.yml:/app/config.yml:ro
      - ./keys:/app/keys:ro
    depends_on:
      - identity-redis
  identity-redis:
    image: redis:latest
    volumes:
      - identity_redis_data:/data
    environment:
      - REDIS_PASSWORD=secret

  # File storage service
  file-storage-service:
    build: ./file-storage-service
    volumes:
      - ./file-storage-service/config.yml:/app/config.yml:ro
      - ./keys/rsa.pub:/app/keys/rsa.pub:ro
    environment:
      FILE_STORAGE_AWS_ACCESS_KEY_ID: ${FILE_STORAGE_AWS_ACCESS_KEY_ID}
      FILE_STORAGE_AWS_REGION: ${FILE_STORAGE_AWS_REGION}
      FILE_STORAGE_AWS_ENDPOINT_URL: ${FILE_STORAGE_AWS_ENDPOINT_URL}
      FILE_STORAGE_AWS_SECRET_ACCESS_KEY: ${FILE_STORAGE_AWS_SECRET_ACCESS_KEY}
      FILE_STORAGE_S3_BUCKET: ${FILE_STORAGE_S3_BUCKET}
      FILE_STORAGE_S3_URL_PREFIX: ${FILE_STORAGE_S3_URL_PREFIX}
      FILE_STORAGE_DB_DSN: host=file-storage-postgres port=5432 user=postgres password=secret dbname=file_metadata sslmode=disable
    depends_on:
      - file-storage-redis
      - file-storage-postgres
  file-storage-postgres:
    image: postgres:latest
    ports: ["5434:5432"]
    volumes:
      - file_storage_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=postgres
      - POSTGRES_DB=file_metadata
  file-storage-redis:
    image: redis:latest
    volumes:
      - file_storage_redis_data:/data
    environment:
      - REDIS_PASSWORD=secret
    restart: on-failure
  file-storage-minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - file_storage_minio_data:/data
    environment:
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=secret
      
  # User service
  user-service:
    build: 
      context: user-service
      dockerfile: Dockerfile
    environment:
      - DB_DSN=postgres://user:secret@user-postgres:5432/userdb?sslmode=disable
    depends_on:
      - user-postgres
    volumes:
      - ./user-service/config.yml:/app/config.yml
      - ./keys/rsa.pub:/app/keys/rsa.pub:ro
  user-postgres:
    image: postgres:latest
    ports: ["5433:5432"]
    environment:
        POSTGRES_USER: user
        POSTGRES_PASSWORD: secret
        POSTGRES_DB: userdb
    restart: on-failure
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
  user-flyway:
    image: flyway/flyway:latest
    command: ["migrate"]
    environment:
      - FLYWAY_URL=jdbc:postgresql://user-postgres:5432/userdb
      - FLYWAY_USER=user
      - FLYWAY_PASSWORD=secret
      - FLYWAY_LOCATIONS=filesystem:/app/migrations
      - FLYWAY_VALIDATE_MIGRATION_NAMING=true
      - FLYWAY_BASELINE_ON_MIGRATE=true
    volumes:
      - ./user-service/migrations:/app/migrations

  messaging-service:
    build: ./messaging-service
    volumes:
      - ./messaging-service/config.yml:/app/config.yml:ro
      - ./keys/rsa.pub:/app/keys/rsa.pub:ro
    depends_on:
      - messaging-redis
      - messaging-postgres
    environment:
      - DB_CONN_STRING=postgres://postgres:secret@messaging-postgres:5432/messaging?sslmode=disable
  messaging-redis:
    image: redis:latest
    volumes:
      - messaging_redis_data:/data
    environment:
      - REDIS_PASSWORD=secret
  messaging-postgres:
    image: postgres:latest
    volumes:
      - messaging_postgres_data:/var/lib/postgresql/data
    ports: ["5432:5432"]
    environment:
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=postgres
      - POSTGRES_DB=messaging
  messaging-flyway:
    image: flyway/flyway:latest
    command: ["migrate"]
    environment:
      - FLYWAY_URL=jdbc:postgresql://messaging-postgres:5432/messaging
      - FLYWAY_USER=postgres
      - FLYWAY_PASSWORD=secret
      - FLYWAY_LOCATIONS=filesystem:/app/migrations
      - FLYWAY_VALIDATE_MIGRATION_NAMING=true
      - FLYWAY_BASELINE_ON_MIGRATE=true
    volumes:
      - ./messaging-service/migrations:/app/migrations

  # Stubs
  sms-service-stub:
    build:
      context: stubs/sms-service-stub
    restart: on-failure

  # Observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    restart: on-failure
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports: [16686:16686]
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    restart: on-failure

volumes:
  file_storage_redis_data:
  file_storage_postgres_data:
  file_storage_minio_data:
  identity_redis_data:
  user_postgres_data:
  messaging_redis_data:
  messaging_postgres_data:
